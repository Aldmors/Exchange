// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211103224929_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Domain.Ask", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Orderbookid")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("size")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Orderbookid");

                    b.ToTable("Ask");
                });

            modelBuilder.Entity("Domain.AskL3", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Orderbook3id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("size")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Orderbook3id");

                    b.ToTable("AskL3");
                });

            modelBuilder.Entity("Domain.Asset", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_orderbook_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_orderbook_start")
                        .HasColumnType("TEXT");

                    b.Property<long?>("data_quote_count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("data_quote_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_quote_start")
                        .HasColumnType("TEXT");

                    b.Property<long?>("data_symbols_count")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("data_trade_count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("data_trade_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_trade_start")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("price_usd")
                        .HasColumnType("TEXT");

                    b.Property<bool>("type_is_crypto")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("volume_1day_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1hrs_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1mth_usd")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Domain.Bid", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Orderbookid")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("size")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Orderbookid");

                    b.ToTable("bid");
                });

            modelBuilder.Entity("Domain.BidL3", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Orderbook3id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("size")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Orderbook3id");

                    b.ToTable("bidL3");
                });

            modelBuilder.Entity("Domain.Exchange", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_orderbook_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_orderbook_start")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_quote_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_quote_start")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_start")
                        .HasColumnType("TEXT");

                    b.Property<long?>("data_symbols_count")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("data_trade_count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("data_trade_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_trade_start")
                        .HasColumnType("TEXT");

                    b.Property<string>("exchange_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1day_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1hrs_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1mth_usd")
                        .HasColumnType("TEXT");

                    b.Property<string>("website")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Exchange");
                });

            modelBuilder.Entity("Domain.ExchangeCurrentrate", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_base")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("ExchangeCurrentrate");
                });

            modelBuilder.Entity("Domain.Exchangerate", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_base")
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_quote")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Exchangerate");
                });

            modelBuilder.Entity("Domain.Icon", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("exchange_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("Domain.OHLCV", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price_close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price_high")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price_low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price_open")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_close")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_open")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_period_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_period_start")
                        .HasColumnType("TEXT");

                    b.Property<int>("trades_count")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("volume_traded")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("OHLCV");
                });

            modelBuilder.Entity("Domain.Orderbook", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("time_coinapi")
                        .HasColumnType("TEXT");

                    b.Property<string>("time_exchange")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Orderbook");
                });

            modelBuilder.Entity("Domain.Orderbook3", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("time_coinapi")
                        .HasColumnType("TEXT");

                    b.Property<string>("time_exchange")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("OrderbookL3");
                });

            modelBuilder.Entity("Domain.Period", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("display_name")
                        .HasColumnType("TEXT");

                    b.Property<int>("length_months")
                        .HasColumnType("INTEGER");

                    b.Property<int>("length_seconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("period_id")
                        .HasColumnType("TEXT");

                    b.Property<int>("unit_count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("unit_name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("Domain.Quote", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ask_price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ask_size")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("bid_price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("bid_size")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("last_tradeid")
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_coinapi")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_exchange")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("last_tradeid");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("Domain.Rate", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExchangeCurrentrateid")
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_quote")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ExchangeCurrentrateid");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("Domain.Symbol", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_base")
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_base_exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_quote")
                        .HasColumnType("TEXT");

                    b.Property<string>("asset_id_quote_exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("exchange_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("future_delivery_time")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("option_contract_unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("option_exercise_style")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("option_expiration_time")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("option_strike_price")
                        .HasColumnType("TEXT");

                    b.Property<bool>("option_type_is_call")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("price_precision")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("size_precision")
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id_exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_type")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1day")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1day_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1hrs")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1hrs_usd")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1mth")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("volume_1mth_usd")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Symbol");
                });

            modelBuilder.Entity("Domain.Trade", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("size")
                        .HasColumnType("TEXT");

                    b.Property<string>("symbol_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("taker_side")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_coinapi")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time_exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("uuid")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Trade");
                });

            modelBuilder.Entity("Domain.Ask", b =>
                {
                    b.HasOne("Domain.Orderbook", null)
                        .WithMany("asks")
                        .HasForeignKey("Orderbookid");
                });

            modelBuilder.Entity("Domain.AskL3", b =>
                {
                    b.HasOne("Domain.Orderbook3", null)
                        .WithMany("asks")
                        .HasForeignKey("Orderbook3id");
                });

            modelBuilder.Entity("Domain.Bid", b =>
                {
                    b.HasOne("Domain.Orderbook", null)
                        .WithMany("bids")
                        .HasForeignKey("Orderbookid");
                });

            modelBuilder.Entity("Domain.BidL3", b =>
                {
                    b.HasOne("Domain.Orderbook3", null)
                        .WithMany("bids")
                        .HasForeignKey("Orderbook3id");
                });

            modelBuilder.Entity("Domain.Quote", b =>
                {
                    b.HasOne("Domain.Trade", "last_trade")
                        .WithMany()
                        .HasForeignKey("last_tradeid");

                    b.Navigation("last_trade");
                });

            modelBuilder.Entity("Domain.Rate", b =>
                {
                    b.HasOne("Domain.ExchangeCurrentrate", null)
                        .WithMany("rates")
                        .HasForeignKey("ExchangeCurrentrateid");
                });

            modelBuilder.Entity("Domain.ExchangeCurrentrate", b =>
                {
                    b.Navigation("rates");
                });

            modelBuilder.Entity("Domain.Orderbook", b =>
                {
                    b.Navigation("asks");

                    b.Navigation("bids");
                });

            modelBuilder.Entity("Domain.Orderbook3", b =>
                {
                    b.Navigation("asks");

                    b.Navigation("bids");
                });
#pragma warning restore 612, 618
        }
    }
}
